# cloudbuild.yaml
options:
  logging: "CLOUD_LOGGING_ONLY"

steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker image'
    args: [
      'build', 
      '-t', 
      'us-central1-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE_NAME:latest', 
      '-f', 'onchain-listeners/Dockerfile',  # Specify the path to the Dockerfile
      'onchain-listeners'  # Specify the build context where source files are
    ]

  # Step 2: Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker image'
    args: [
      'push', 
      'us-central1-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE_NAME:latest'
    ]

  # Step 3: Deploy to both VMs (us-central1 & asia-southeast1)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to both VMs'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        for vm in $_VM_NAME_1,$_ZONE_1 $_VM_NAME_2,$_ZONE_2; do 
          IFS=',' read -r vm_name zone <<< "$vm"
          echo "🚀 Deploying to $vm_name in zone $zone"
          
          gcloud compute ssh $vm_name --zone=$zone --project=$PROJECT_ID --command "
            echo '🔄 Pulling latest image...'
            sudo docker pull us-central1-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE_NAME:latest && 
            
            echo '🛑 Stopping existing container...'
            sudo docker stop $_SERVICE_NAME || true && 
            
            echo '🗑️ Removing existing container...'
            sudo docker rm $_SERVICE_NAME || true && 
            
            echo '🚀 Running new container...'
            sudo docker run -d --name $_SERVICE_NAME --restart always \
              -p 8080:8080 \
              -v /etc/google-cloud:/etc/google-cloud \
              -e GOOGLE_APPLICATION_CREDENTIALS=/etc/google-cloud/service-accounts/credentials.json \
              us-central1-docker.pkg.dev/$PROJECT_ID/$_REPO_NAME/$_SERVICE_NAME:latest
          "

          echo "📡 Waiting for health check on $vm_name ($zone)..."
          sleep 10 # Wait for container to boot
          health_url="http://$(gcloud compute instances describe $vm_name --zone=$zone --format='get(networkInterfaces[0].accessConfigs[0].natIP)'):8080/healthz"
          
          if curl --silent --fail $health_url; then
            echo "✅ Health check passed for $vm_name ($zone)"
          else
            echo "❌ Health check failed for $vm_name ($zone)"
            exit 1
          fi
        done

substitutions:
  _PROJECT_ID: "$PROJECT_ID"
  _SERVICE_NAME: "onchain-listeners"
  _REPO_NAME: "littlefinger-listeners-repo"
  _VM_NAME_1: "littlefinger-onchain-listeners-us-1"
  _VM_NAME_2: "littlefinger-onchain-listeners-asia-2"
  _ZONE_1: "us-central1-a"
  _ZONE_2: "asia-southeast1-b"
  _SERVICE_ACCOUNT: "saib-ai-playground-sa@saib-ai-playground.iam.gserviceaccount.com"

timeout: '1800s'

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract LittlefingerGame {
    address public owner;
    address public lastPlayer;
    uint256 public globalQueryCount = 0; // Total number of queries submitted
    uint256 public constant MAX_QUERIES = 500; // Max queries allowed per player
    uint256 public constant IDLE_TIME_LIMIT = 7 days; // Adjusted to 1 week
    uint256 public constant MAX_QUERY_FEE = 1 ether; // Cap for exponential query fees

    address[] public players; // Track all players who participated
    mapping(address => uint256) public playerQueryCount; // Queries per player
    mapping(address => uint256) public playerTotalFee; // Total fees paid by each player

    uint256 public lastInteraction; // Tracks the last interaction timestamp

    // Events
    event QueryFeePaid(address indexed player, uint256 feeAmount, string queryID);
    event PrizeTransferApproved(address indexed winner, uint256 amount);
    event PrizeTransferRejected(address indexed player);
    event PrizeToBeDistributedDueToGameExhaustion(uint256 totalPrizePoolBeforeDistribution);
    event PrizePoolBalanceAfterGameExhaustion(uint256 remainingPrizePool);
    event TimerStarted(uint256 timestamp);
    event NextQueryFee(uint256 nextFee, uint256 currentCount);
    event Withdrawal(address indexed owner, uint256 amount);

    // Errors
    error GameExhausted();
    error Unauthorized();
    error InvalidQuery();
    error InsufficientQueryFee(uint256 requiredFee, uint256 sentFee);
    error MaxQueriesReached(uint256 maxQueries);
    error InvalidRecipient();

    modifier onlyOwner() {
        require(msg.sender == owner, "Unauthorized");
        _;
    }

    modifier checkIdleTime() {
        if (block.timestamp > lastInteraction + IDLE_TIME_LIMIT) {
            revert GameExhausted();
        }
        _;
    }

    constructor() payable {
        owner = msg.sender;
        require(msg.value > 0, "Initial funding required");
        lastInteraction = block.timestamp; // Initialize timer on deployment
    }

    // Function to calculate the current query fee
    function calculateQueryFee() public view returns (uint256) {
        if (globalQueryCount < 30) {
            return 0.005 ether + (0.001 ether * globalQueryCount);
        } else {
            uint256 lastLinearFee = 0.005 ether + (0.001 ether * 30);
            uint256 maxExponentialCount = 30 + logBase(125, (MAX_QUERY_FEE / lastLinearFee));
            if (globalQueryCount >= maxExponentialCount) {
                return MAX_QUERY_FEE;
            }

            uint256 exponentialGrowth = (125 ** (globalQueryCount - 30)) / (100 ** (globalQueryCount - 30));
            uint256 fee = lastLinearFee * exponentialGrowth;
            return fee > MAX_QUERY_FEE ? MAX_QUERY_FEE : fee;
        }
    }

    // Function to calculate the next query fee
    function calculateNextQueryFee() public view returns (uint256) {
        uint256 nextCount = globalQueryCount + 1;
        if (nextCount < 30) {
            return 0.005 ether + (0.001 ether * nextCount);
        } else {
            uint256 lastLinearFee = 0.005 ether + (0.001 ether * 30);
            uint256 maxExponentialCount = 30 + logBase(125, (MAX_QUERY_FEE / lastLinearFee));
            if (nextCount >= maxExponentialCount) {
                return MAX_QUERY_FEE;
            }

            uint256 exponentialGrowth = (125 ** (nextCount - 30)) / (100 ** (nextCount - 30));
            uint256 fee = lastLinearFee * exponentialGrowth;
            return fee > MAX_QUERY_FEE ? MAX_QUERY_FEE : fee;
        }
    }

    // Helper function to calculate the logarithm
    function logBase(uint256 base, uint256 x) internal pure returns (uint256) {
        uint256 result = 0;
        while (x >= base) {
            x /= base;
            result++;
        }
        return result;
    }

    // Function to return the current prize pool
    function prizePool() public view returns (uint256) {
        return address(this).balance;
    }

    // Function to get the entire list of players
    function getAllPlayers() public view returns (address[] memory) {
        return players;
    }

    // Submit a query with the required fee
    function submitQuery(string memory query, string memory queryID) external payable checkIdleTime {
        if (bytes(query).length == 0) revert InvalidQuery();
        uint256 currentFee = calculateQueryFee();
        if (msg.value < currentFee) revert InsufficientQueryFee(currentFee, msg.value);
        if (prizePool() == 0) revert GameExhausted();
        if (playerQueryCount[msg.sender] >= MAX_QUERIES) revert MaxQueriesReached(MAX_QUERIES);

        // Distribute the fee: 80% to prize pool, 20% to owner
        uint256 prizeAmount = (msg.value * 80) / 100;
        uint256 ownerAmount = msg.value - prizeAmount;

        (bool success, ) = payable(owner).call{value: ownerAmount}("");
        require(success, "Owner transfer failed");

        // Add new player to the list if they haven't participated before
        if (playerQueryCount[msg.sender] == 0) {
            players.push(msg.sender);
        }

        // Update query counts and fees
        playerQueryCount[msg.sender]++;
        playerTotalFee[msg.sender] += currentFee;
        lastPlayer = msg.sender;
        globalQueryCount++;

        // Update last interaction timestamp
        lastInteraction = block.timestamp;

        emit QueryFeePaid(msg.sender, currentFee, queryID);

        // Emit next query fee
        emit NextQueryFee(calculateNextQueryFee(), globalQueryCount);
    }

    // Function to withdraw funds by the owner
    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds available for withdrawal");

        (bool success, ) = payable(owner).call{value: balance}("");
        require(success, "Withdrawal failed");

        emit Withdrawal(owner, balance);
    }

    // Function for the owner to approve a transfer
    function approveTransfer(address recipient) external onlyOwner checkIdleTime {
        if (prizePool() == 0) revert GameExhausted();
        if (lastPlayer == address(0)) revert InvalidRecipient();
        if (recipient == address(0)) revert InvalidRecipient();

        uint256 transferAmount = prizePool();

        (bool success, ) = payable(recipient).call{value: transferAmount}("");
        require(success, "Transfer to recipient failed");

        emit PrizeTransferApproved(recipient, transferAmount);
    }

    // Function for the owner to reject a transfer
    function rejectTransfer() external onlyOwner checkIdleTime {
        if (lastPlayer == address(0)) revert InvalidRecipient();
        emit PrizeTransferRejected(lastPlayer);
    }

    // End game logic due to exhaustion
    function endGameDueToExhaustion() external onlyOwner {
        if (prizePool() == 0) revert GameExhausted();
        if (lastPlayer == address(0)) revert InvalidRecipient();

        uint256 totalPrizePool = prizePool();
        emit PrizeToBeDistributedDueToGameExhaustion(totalPrizePool);

        uint256 lastPlayerReward = (totalPrizePool * 10) / 100;

        (bool success, ) = payable(lastPlayer).call{value: lastPlayerReward}("");
        require(success, "Transfer to last player failed");

        uint256 remainingPool = totalPrizePool - lastPlayerReward;
        uint256 totalQueries = totalQueriesCount();

        if (totalQueries > 0) {
            for (uint256 i = 0; i < players.length; i++) {
                address player = players[i];
                uint256 playerReward = (remainingPool * playerQueryCount[player]) / totalQueries;
                if (playerReward > 0) {
                    (success, ) = payable(player).call{value: playerReward}("");
                    require(success, "Player reward transfer failed");
                }
            }
        }

        emit PrizePoolBalanceAfterGameExhaustion(address(this).balance);
    }

    // Helper function to get the total number of queries submitted by all players
    function totalQueriesCount() public view returns (uint256) {
        uint256 total = 0;
        for (uint256 i = 0; i < players.length; i++) {
            total += playerQueryCount[players[i]];
        }
        return total;
    }

    // Fallback function to handle unexpected transactions
    fallback() external payable {
        revert("Fallback function is not implemented");
    }

    // Receive function to handle direct transfers to the contract address
    receive() external payable {}

    // Function to restart the timer manually
    function restartTimer() external onlyOwner {
        lastInteraction = block.timestamp;
        emit TimerStarted(lastInteraction);
    }
}
